import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'
import { NextResponse } from 'next/server'

const isPublicRoute = createRouteMatcher(['/sign-in(.*)', '/sign-up(.*)', '/'])

export default clerkMiddleware(async (auth, req) => {
  const isPublic = isPublicRoute(req)
  const url = req.nextUrl

  if (!isPublic) {
    await auth.protect() // ‡∏à‡∏∞ throw ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  }

  const { userId, orgId } = await auth()

  // üü° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ route ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà public ‚Üí redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ sign-in
  if (!userId && !isPublic) {
    const signInUrl = new URL('/sign-in', req.url)
    signInUrl.searchParams.set('returnBackUrl', req.url) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login
    return NextResponse.redirect(signInUrl)
  }

  // üü¢ ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ public ‚Üí redirect ‡πÑ‡∏õ select-org ‡∏´‡∏£‡∏∑‡∏≠ organization/orgId
  if (userId && isPublic) {
    let path = '/select-org'
    if (orgId) {
      path = `/organization/${orgId}`
    }

    return NextResponse.redirect(new URL(path, req.url))
  }

  // üîµ ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å org ‚Üí ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÑ‡∏õ select-org
  if (userId && !orgId && url.pathname !== '/select-org') {
    return NextResponse.redirect(new URL('/select-org', req.url))
  }

  // ‚úÖ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
  return NextResponse.next()
})

export const config = {
  matcher: [
    // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå static
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API routes ‡πÄ‡∏™‡∏°‡∏≠
    '/(api|trpc)(.*)',
  ],
}
